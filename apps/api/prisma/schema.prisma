// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OPERATOR
}

enum BloodType {
  O_POS
  O_NEG
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      Role       @default(OPERATOR)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[] @relation("UserEmployees")
  auditLogs AuditLog[]
}

model Arl {
  id        String     @id @default(uuid())
  name      String     @unique
  employees Employee[]
}

model Eps {
  id        String     @id @default(uuid())
  name      String     @unique
  employees Employee[]
}

model PensionFund {
  id        String     @id @default(uuid())
  name      String     @unique
  employees Employee[]
}

model Employee {
  id            String      @id @default(uuid())
  firstName     String
  lastName      String
  nationalId    String      @unique // CÃ©dula
  bloodType     BloodType
  phone         String
  salary        Decimal     @db.Decimal(18, 2)
  arlId         String
  epsId         String
  pensionFundId String
  arl           Arl         @relation(fields: [arlId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  eps           Eps         @relation(fields: [epsId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  pensionFund   PensionFund @relation(fields: [pensionFundId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdById   String?
  createdBy     User?       @relation("UserEmployees", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([lastName, firstName])
  @@index([arlId])
  @@index([epsId])
  @@index([pensionFundId])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  entity    String
  entityId  String
  action    String
  diff      String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entity, entityId])
}
